// Generated by gencpp from file drone_msgs/Window.msg
// DO NOT EDIT!


#ifndef DRONE_MSGS_MESSAGE_WINDOW_H
#define DRONE_MSGS_MESSAGE_WINDOW_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace drone_msgs
{
template <class ContainerAllocator>
struct Window_
{
  typedef Window_<ContainerAllocator> Type;

  Window_()
    : type()
    , x1(0.0)
    , y1(0.0)
    , x2(0.0)
    , y2(0.0)
    , area(0.0)
    , horizontal_error(0.0)
    , vertical_error(0.0)  {
    }
  Window_(const ContainerAllocator& _alloc)
    : type(_alloc)
    , x1(0.0)
    , y1(0.0)
    , x2(0.0)
    , y2(0.0)
    , area(0.0)
    , horizontal_error(0.0)
    , vertical_error(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _type_type;
  _type_type type;

   typedef double _x1_type;
  _x1_type x1;

   typedef double _y1_type;
  _y1_type y1;

   typedef double _x2_type;
  _x2_type x2;

   typedef double _y2_type;
  _y2_type y2;

   typedef double _area_type;
  _area_type area;

   typedef double _horizontal_error_type;
  _horizontal_error_type horizontal_error;

   typedef double _vertical_error_type;
  _vertical_error_type vertical_error;





  typedef boost::shared_ptr< ::drone_msgs::Window_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::drone_msgs::Window_<ContainerAllocator> const> ConstPtr;

}; // struct Window_

typedef ::drone_msgs::Window_<std::allocator<void> > Window;

typedef boost::shared_ptr< ::drone_msgs::Window > WindowPtr;
typedef boost::shared_ptr< ::drone_msgs::Window const> WindowConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::drone_msgs::Window_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::drone_msgs::Window_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::drone_msgs::Window_<ContainerAllocator1> & lhs, const ::drone_msgs::Window_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type &&
    lhs.x1 == rhs.x1 &&
    lhs.y1 == rhs.y1 &&
    lhs.x2 == rhs.x2 &&
    lhs.y2 == rhs.y2 &&
    lhs.area == rhs.area &&
    lhs.horizontal_error == rhs.horizontal_error &&
    lhs.vertical_error == rhs.vertical_error;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::drone_msgs::Window_<ContainerAllocator1> & lhs, const ::drone_msgs::Window_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace drone_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::drone_msgs::Window_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drone_msgs::Window_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::drone_msgs::Window_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::drone_msgs::Window_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drone_msgs::Window_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drone_msgs::Window_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::drone_msgs::Window_<ContainerAllocator> >
{
  static const char* value()
  {
    return "125dc6694452e1317a4f7b68ceb93345";
  }

  static const char* value(const ::drone_msgs::Window_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x125dc6694452e131ULL;
  static const uint64_t static_value2 = 0x7a4f7b68ceb93345ULL;
};

template<class ContainerAllocator>
struct DataType< ::drone_msgs::Window_<ContainerAllocator> >
{
  static const char* value()
  {
    return "drone_msgs/Window";
  }

  static const char* value(const ::drone_msgs::Window_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::drone_msgs::Window_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Vertexs of window from top-right corner, clockwise \n"
"\n"
"string type\n"
"\n"
"float64 x1\n"
"float64 y1\n"
"\n"
"float64 x2\n"
"float64 y2\n"
"\n"
"float64 area\n"
"float64 horizontal_error\n"
"float64 vertical_error\n"
;
  }

  static const char* value(const ::drone_msgs::Window_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::drone_msgs::Window_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.x1);
      stream.next(m.y1);
      stream.next(m.x2);
      stream.next(m.y2);
      stream.next(m.area);
      stream.next(m.horizontal_error);
      stream.next(m.vertical_error);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Window_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::drone_msgs::Window_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::drone_msgs::Window_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.type);
    s << indent << "x1: ";
    Printer<double>::stream(s, indent + "  ", v.x1);
    s << indent << "y1: ";
    Printer<double>::stream(s, indent + "  ", v.y1);
    s << indent << "x2: ";
    Printer<double>::stream(s, indent + "  ", v.x2);
    s << indent << "y2: ";
    Printer<double>::stream(s, indent + "  ", v.y2);
    s << indent << "area: ";
    Printer<double>::stream(s, indent + "  ", v.area);
    s << indent << "horizontal_error: ";
    Printer<double>::stream(s, indent + "  ", v.horizontal_error);
    s << indent << "vertical_error: ";
    Printer<double>::stream(s, indent + "  ", v.vertical_error);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRONE_MSGS_MESSAGE_WINDOW_H
