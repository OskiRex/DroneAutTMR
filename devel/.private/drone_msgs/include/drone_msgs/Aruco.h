// Generated by gencpp from file drone_msgs/Aruco.msg
// DO NOT EDIT!


#ifndef DRONE_MSGS_MESSAGE_ARUCO_H
#define DRONE_MSGS_MESSAGE_ARUCO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace drone_msgs
{
template <class ContainerAllocator>
struct Aruco_
{
  typedef Aruco_<ContainerAllocator> Type;

  Aruco_()
    : aruco_id(0)
    , x1(0.0)
    , y1(0.0)
    , x2(0.0)
    , y2(0.0)
    , x3(0.0)
    , y3(0.0)
    , x4(0.0)
    , y4(0.0)
    , yaw_error(0.0)
    , distance(0.0)  {
    }
  Aruco_(const ContainerAllocator& _alloc)
    : aruco_id(0)
    , x1(0.0)
    , y1(0.0)
    , x2(0.0)
    , y2(0.0)
    , x3(0.0)
    , y3(0.0)
    , x4(0.0)
    , y4(0.0)
    , yaw_error(0.0)
    , distance(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _aruco_id_type;
  _aruco_id_type aruco_id;

   typedef double _x1_type;
  _x1_type x1;

   typedef double _y1_type;
  _y1_type y1;

   typedef double _x2_type;
  _x2_type x2;

   typedef double _y2_type;
  _y2_type y2;

   typedef double _x3_type;
  _x3_type x3;

   typedef double _y3_type;
  _y3_type y3;

   typedef double _x4_type;
  _x4_type x4;

   typedef double _y4_type;
  _y4_type y4;

   typedef double _yaw_error_type;
  _yaw_error_type yaw_error;

   typedef double _distance_type;
  _distance_type distance;





  typedef boost::shared_ptr< ::drone_msgs::Aruco_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::drone_msgs::Aruco_<ContainerAllocator> const> ConstPtr;

}; // struct Aruco_

typedef ::drone_msgs::Aruco_<std::allocator<void> > Aruco;

typedef boost::shared_ptr< ::drone_msgs::Aruco > ArucoPtr;
typedef boost::shared_ptr< ::drone_msgs::Aruco const> ArucoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::drone_msgs::Aruco_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::drone_msgs::Aruco_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::drone_msgs::Aruco_<ContainerAllocator1> & lhs, const ::drone_msgs::Aruco_<ContainerAllocator2> & rhs)
{
  return lhs.aruco_id == rhs.aruco_id &&
    lhs.x1 == rhs.x1 &&
    lhs.y1 == rhs.y1 &&
    lhs.x2 == rhs.x2 &&
    lhs.y2 == rhs.y2 &&
    lhs.x3 == rhs.x3 &&
    lhs.y3 == rhs.y3 &&
    lhs.x4 == rhs.x4 &&
    lhs.y4 == rhs.y4 &&
    lhs.yaw_error == rhs.yaw_error &&
    lhs.distance == rhs.distance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::drone_msgs::Aruco_<ContainerAllocator1> & lhs, const ::drone_msgs::Aruco_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace drone_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::drone_msgs::Aruco_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drone_msgs::Aruco_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::drone_msgs::Aruco_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::drone_msgs::Aruco_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drone_msgs::Aruco_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drone_msgs::Aruco_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::drone_msgs::Aruco_<ContainerAllocator> >
{
  static const char* value()
  {
    return "19ee4d4cf4e8225cc839c83895a4b2f2";
  }

  static const char* value(const ::drone_msgs::Aruco_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x19ee4d4cf4e8225cULL;
  static const uint64_t static_value2 = 0xc839c83895a4b2f2ULL;
};

template<class ContainerAllocator>
struct DataType< ::drone_msgs::Aruco_<ContainerAllocator> >
{
  static const char* value()
  {
    return "drone_msgs/Aruco";
  }

  static const char* value(const ::drone_msgs::Aruco_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::drone_msgs::Aruco_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 aruco_id\n"
"\n"
"float64 x1\n"
"float64 y1\n"
"\n"
"float64 x2\n"
"float64 y2\n"
"\n"
"float64 x3\n"
"float64 y3\n"
"\n"
"float64 x4\n"
"float64 y4\n"
"\n"
"float64 yaw_error\n"
"float64 distance\n"
;
  }

  static const char* value(const ::drone_msgs::Aruco_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::drone_msgs::Aruco_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.aruco_id);
      stream.next(m.x1);
      stream.next(m.y1);
      stream.next(m.x2);
      stream.next(m.y2);
      stream.next(m.x3);
      stream.next(m.y3);
      stream.next(m.x4);
      stream.next(m.y4);
      stream.next(m.yaw_error);
      stream.next(m.distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Aruco_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::drone_msgs::Aruco_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::drone_msgs::Aruco_<ContainerAllocator>& v)
  {
    s << indent << "aruco_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.aruco_id);
    s << indent << "x1: ";
    Printer<double>::stream(s, indent + "  ", v.x1);
    s << indent << "y1: ";
    Printer<double>::stream(s, indent + "  ", v.y1);
    s << indent << "x2: ";
    Printer<double>::stream(s, indent + "  ", v.x2);
    s << indent << "y2: ";
    Printer<double>::stream(s, indent + "  ", v.y2);
    s << indent << "x3: ";
    Printer<double>::stream(s, indent + "  ", v.x3);
    s << indent << "y3: ";
    Printer<double>::stream(s, indent + "  ", v.y3);
    s << indent << "x4: ";
    Printer<double>::stream(s, indent + "  ", v.x4);
    s << indent << "y4: ";
    Printer<double>::stream(s, indent + "  ", v.y4);
    s << indent << "yaw_error: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_error);
    s << indent << "distance: ";
    Printer<double>::stream(s, indent + "  ", v.distance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRONE_MSGS_MESSAGE_ARUCO_H
