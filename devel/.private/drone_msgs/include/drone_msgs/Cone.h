// Generated by gencpp from file drone_msgs/Cone.msg
// DO NOT EDIT!


#ifndef DRONE_MSGS_MESSAGE_CONE_H
#define DRONE_MSGS_MESSAGE_CONE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace drone_msgs
{
template <class ContainerAllocator>
struct Cone_
{
  typedef Cone_<ContainerAllocator> Type;

  Cone_()
    : horizontal_error(0.0)
    , vertical_error(0.0)  {
    }
  Cone_(const ContainerAllocator& _alloc)
    : horizontal_error(0.0)
    , vertical_error(0.0)  {
  (void)_alloc;
    }



   typedef double _horizontal_error_type;
  _horizontal_error_type horizontal_error;

   typedef double _vertical_error_type;
  _vertical_error_type vertical_error;





  typedef boost::shared_ptr< ::drone_msgs::Cone_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::drone_msgs::Cone_<ContainerAllocator> const> ConstPtr;

}; // struct Cone_

typedef ::drone_msgs::Cone_<std::allocator<void> > Cone;

typedef boost::shared_ptr< ::drone_msgs::Cone > ConePtr;
typedef boost::shared_ptr< ::drone_msgs::Cone const> ConeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::drone_msgs::Cone_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::drone_msgs::Cone_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::drone_msgs::Cone_<ContainerAllocator1> & lhs, const ::drone_msgs::Cone_<ContainerAllocator2> & rhs)
{
  return lhs.horizontal_error == rhs.horizontal_error &&
    lhs.vertical_error == rhs.vertical_error;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::drone_msgs::Cone_<ContainerAllocator1> & lhs, const ::drone_msgs::Cone_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace drone_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::drone_msgs::Cone_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drone_msgs::Cone_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::drone_msgs::Cone_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::drone_msgs::Cone_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drone_msgs::Cone_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drone_msgs::Cone_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::drone_msgs::Cone_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cbbfed3ab2dc6e420d9622629e096adc";
  }

  static const char* value(const ::drone_msgs::Cone_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcbbfed3ab2dc6e42ULL;
  static const uint64_t static_value2 = 0x0d9622629e096adcULL;
};

template<class ContainerAllocator>
struct DataType< ::drone_msgs::Cone_<ContainerAllocator> >
{
  static const char* value()
  {
    return "drone_msgs/Cone";
  }

  static const char* value(const ::drone_msgs::Cone_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::drone_msgs::Cone_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 horizontal_error\n"
"float64 vertical_error\n"
;
  }

  static const char* value(const ::drone_msgs::Cone_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::drone_msgs::Cone_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.horizontal_error);
      stream.next(m.vertical_error);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Cone_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::drone_msgs::Cone_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::drone_msgs::Cone_<ContainerAllocator>& v)
  {
    s << indent << "horizontal_error: ";
    Printer<double>::stream(s, indent + "  ", v.horizontal_error);
    s << indent << "vertical_error: ";
    Printer<double>::stream(s, indent + "  ", v.vertical_error);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRONE_MSGS_MESSAGE_CONE_H
