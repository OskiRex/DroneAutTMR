// Generated by gencpp from file drone_msgs/pose_velsRequest.msg
// DO NOT EDIT!


#ifndef DRONE_MSGS_MESSAGE_POSE_VELSREQUEST_H
#define DRONE_MSGS_MESSAGE_POSE_VELSREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace drone_msgs
{
template <class ContainerAllocator>
struct pose_velsRequest_
{
  typedef pose_velsRequest_<ContainerAllocator> Type;

  pose_velsRequest_()
    : vx_linear(0.0)
    , vy_linear(0.0)
    , vz_linear(0.0)
    , vz_angular(0.0)  {
    }
  pose_velsRequest_(const ContainerAllocator& _alloc)
    : vx_linear(0.0)
    , vy_linear(0.0)
    , vz_linear(0.0)
    , vz_angular(0.0)  {
  (void)_alloc;
    }



   typedef float _vx_linear_type;
  _vx_linear_type vx_linear;

   typedef float _vy_linear_type;
  _vy_linear_type vy_linear;

   typedef float _vz_linear_type;
  _vz_linear_type vz_linear;

   typedef float _vz_angular_type;
  _vz_angular_type vz_angular;





  typedef boost::shared_ptr< ::drone_msgs::pose_velsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::drone_msgs::pose_velsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct pose_velsRequest_

typedef ::drone_msgs::pose_velsRequest_<std::allocator<void> > pose_velsRequest;

typedef boost::shared_ptr< ::drone_msgs::pose_velsRequest > pose_velsRequestPtr;
typedef boost::shared_ptr< ::drone_msgs::pose_velsRequest const> pose_velsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::drone_msgs::pose_velsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::drone_msgs::pose_velsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::drone_msgs::pose_velsRequest_<ContainerAllocator1> & lhs, const ::drone_msgs::pose_velsRequest_<ContainerAllocator2> & rhs)
{
  return lhs.vx_linear == rhs.vx_linear &&
    lhs.vy_linear == rhs.vy_linear &&
    lhs.vz_linear == rhs.vz_linear &&
    lhs.vz_angular == rhs.vz_angular;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::drone_msgs::pose_velsRequest_<ContainerAllocator1> & lhs, const ::drone_msgs::pose_velsRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace drone_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::drone_msgs::pose_velsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drone_msgs::pose_velsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::drone_msgs::pose_velsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::drone_msgs::pose_velsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drone_msgs::pose_velsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drone_msgs::pose_velsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::drone_msgs::pose_velsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "88c123551d9e9357bdc4af9e608ad391";
  }

  static const char* value(const ::drone_msgs::pose_velsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x88c123551d9e9357ULL;
  static const uint64_t static_value2 = 0xbdc4af9e608ad391ULL;
};

template<class ContainerAllocator>
struct DataType< ::drone_msgs::pose_velsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "drone_msgs/pose_velsRequest";
  }

  static const char* value(const ::drone_msgs::pose_velsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::drone_msgs::pose_velsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 vx_linear\n"
"float32 vy_linear\n"
"float32 vz_linear\n"
"float32 vz_angular\n"
;
  }

  static const char* value(const ::drone_msgs::pose_velsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::drone_msgs::pose_velsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vx_linear);
      stream.next(m.vy_linear);
      stream.next(m.vz_linear);
      stream.next(m.vz_angular);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pose_velsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::drone_msgs::pose_velsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::drone_msgs::pose_velsRequest_<ContainerAllocator>& v)
  {
    s << indent << "vx_linear: ";
    Printer<float>::stream(s, indent + "  ", v.vx_linear);
    s << indent << "vy_linear: ";
    Printer<float>::stream(s, indent + "  ", v.vy_linear);
    s << indent << "vz_linear: ";
    Printer<float>::stream(s, indent + "  ", v.vz_linear);
    s << indent << "vz_angular: ";
    Printer<float>::stream(s, indent + "  ", v.vz_angular);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRONE_MSGS_MESSAGE_POSE_VELSREQUEST_H
