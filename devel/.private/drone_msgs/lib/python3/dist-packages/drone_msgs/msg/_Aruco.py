# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from drone_msgs/Aruco.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Aruco(genpy.Message):
  _md5sum = "19ee4d4cf4e8225cc839c83895a4b2f2"
  _type = "drone_msgs/Aruco"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 aruco_id

float64 x1
float64 y1

float64 x2
float64 y2

float64 x3
float64 y3

float64 x4
float64 y4

float64 yaw_error
float64 distance"""
  __slots__ = ['aruco_id','x1','y1','x2','y2','x3','y3','x4','y4','yaw_error','distance']
  _slot_types = ['int32','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       aruco_id,x1,y1,x2,y2,x3,y3,x4,y4,yaw_error,distance

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Aruco, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.aruco_id is None:
        self.aruco_id = 0
      if self.x1 is None:
        self.x1 = 0.
      if self.y1 is None:
        self.y1 = 0.
      if self.x2 is None:
        self.x2 = 0.
      if self.y2 is None:
        self.y2 = 0.
      if self.x3 is None:
        self.x3 = 0.
      if self.y3 is None:
        self.y3 = 0.
      if self.x4 is None:
        self.x4 = 0.
      if self.y4 is None:
        self.y4 = 0.
      if self.yaw_error is None:
        self.yaw_error = 0.
      if self.distance is None:
        self.distance = 0.
    else:
      self.aruco_id = 0
      self.x1 = 0.
      self.y1 = 0.
      self.x2 = 0.
      self.y2 = 0.
      self.x3 = 0.
      self.y3 = 0.
      self.x4 = 0.
      self.y4 = 0.
      self.yaw_error = 0.
      self.distance = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i10d().pack(_x.aruco_id, _x.x1, _x.y1, _x.x2, _x.y2, _x.x3, _x.y3, _x.x4, _x.y4, _x.yaw_error, _x.distance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 84
      (_x.aruco_id, _x.x1, _x.y1, _x.x2, _x.y2, _x.x3, _x.y3, _x.x4, _x.y4, _x.yaw_error, _x.distance,) = _get_struct_i10d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i10d().pack(_x.aruco_id, _x.x1, _x.y1, _x.x2, _x.y2, _x.x3, _x.y3, _x.x4, _x.y4, _x.yaw_error, _x.distance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 84
      (_x.aruco_id, _x.x1, _x.y1, _x.x2, _x.y2, _x.x3, _x.y3, _x.x4, _x.y4, _x.yaw_error, _x.distance,) = _get_struct_i10d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i10d = None
def _get_struct_i10d():
    global _struct_i10d
    if _struct_i10d is None:
        _struct_i10d = struct.Struct("<i10d")
    return _struct_i10d
